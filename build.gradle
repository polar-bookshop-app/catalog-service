plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '7.2.1' // https://plugins.gradle.org/plugin/com.diffplug.gradle.spotless
}

spotless {
    java {
        removeUnusedImports()

        // Set version and format style
        googleJavaFormat('1.17.0').aosp()
    }
}

group = 'com.github.polar'
version = '0.0.1-SNAPSHOT'
description = 'Catalog Service Spring Boot API'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// automatically run spotless formatting before compilation
tasks.named('compileJava') {
    dependsOn tasks.named('spotlessApply')
}

bootRun {
    systemProperty 'catalog.service.testdata.enabled', 'true' // enabled 'BookDataLoader' for './gradlew bootRun'
    systemProperty 'spring.cloud.config.fail-fast', 'false' // make config service optional
//    systemProperty 'spring.profiles.active', 'prod' // enabled 'prod' profile
}


bootBuildImage {
    //
    // https://docs.spring.io/spring-boot/gradle-plugin/packaging-oci-image.html#build-image.customization
    //
    // https://paketo.io/docs/howto/java/#use-an-alternative-jvm
    //
    builder = "paketobuildpacks/builder-noble-java-tiny"

    // https://github.com/paketo-buildpacks/bellsoft-liberica
    buildpacks = [
            "paketo-buildpacks/bellsoft-liberica", "paketobuildpacks/java"
    ]

    imageName = "${project.name}"
    // https://github.com/paketo-buildpacks/graalvm?tab=readme-ov-file#configuration
    environment = [
            "BP_JVM_VERSION": "25.*", //TODO: here we use java 25 but everything else compiled using java 24
            "BP_JVM_TYPE"   : "JRE",
    ]
    //https://docs.spring.io/spring-boot/gradle-plugin/packaging-oci-image.html#build-image.examples.publish
    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}
